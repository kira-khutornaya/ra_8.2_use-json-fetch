{"version":3,"sources":["components/LoaderInline.js","components/Data.js","hooks/useJsonFetch.js","App.js","reportWebVitals.js","index.js"],"names":["LoaderInline","className","Loader","active","inline","Data","pathname","description","url","opts","useState","data","setData","isLoading","setIsLoading","error","setError","useEffect","a","fetch","response","ok","Error","statusText","json","fetchData","useJsonFetch","process","style","color","status","defaultProps","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"iSASeA,EANM,kBACnB,qBAAKC,UAAU,oBAAf,SACE,cAACC,EAAA,EAAD,CAAQC,QAAM,EAACC,QAAM,OCAzB,SAASC,EAAT,GAA0C,IAA1BC,EAAyB,EAAzBA,SAAUC,EAAe,EAAfA,YAAe,ECH1B,SAAsBC,GAAmB,IAAdC,EAAa,uDAAN,KAAM,EAC7BC,mBAAS,MADoB,mBAC9CC,EAD8C,KACxCC,EADwC,OAEnBF,oBAAS,GAFU,mBAE9CG,EAF8C,KAEnCC,EAFmC,OAG3BJ,mBAAS,MAHkB,mBAG9CK,EAH8C,KAGvCC,EAHuC,KA2BrD,OAtBAC,qBAAU,YACO,uCAAG,8BAAAC,EAAA,6DAChBJ,GAAa,GADG,kBAGSK,MAAMX,EAAKC,GAHpB,WAGRW,EAHQ,QAIAC,GAJA,sBAKN,IAAIC,MAAMF,EAASG,YALb,uBAQKH,EAASI,OARd,OAQRA,EARQ,OASdZ,EAAQY,GACRR,EAAS,MAVK,kDAYdA,EAAS,EAAD,IAZM,yBAcdF,GAAa,GAdC,6EAAH,oDAkBfW,KACC,CAACjB,EAAKC,IAEF,CAACE,EAAME,EAAWE,GDvBQW,CAAa,GAAD,OAAIC,yCAAJ,OAAgCrB,IADtC,mBAChCK,EADgC,KAC1BE,EAD0B,KACfE,EADe,KAGvC,OACE,sBAAKd,UAAU,OAAf,UACGM,EADH,IAGIM,GAAa,cAAC,EAAD,IACbE,GAAS,mBAAGa,MAAO,CAAEC,MAAO,OAAnB,mCACTlB,GAAQ,mBAAGiB,MAAO,CAAEC,MAAO,SAAnB,SAA+BlB,EAAKmB,YAKpDzB,EAAK0B,aAAe,CAClBxB,YAAa,IAQAF,QEdA2B,MAVf,WACE,OACE,sBAAK/B,UAAU,MAAf,UACE,cAAC,EAAD,CAAMK,SAAS,UAAUC,YAAY,4GACrC,cAAC,EAAD,CAAMD,SAAS,QAAQC,YAAY,gGACnC,cAAC,EAAD,CAAMD,SAAS,OAAOC,YAAY,qJCKzB0B,EAdS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAEnB,IADLC,EACI,EADJA,OAAQC,EACJ,EADIA,OAAQC,EACZ,EADYA,OAAQC,EACpB,EADoBA,OAAQC,EAC5B,EAD4BA,QAEhCJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCFdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.bbf53693.chunk.js","sourcesContent":["import React from 'react';\nimport { Loader } from 'semantic-ui-react';\n\nconst LoaderInline = () => (\n  <div className=\"Loader__container\">\n    <Loader active inline />\n  </div>\n);\n\nexport default LoaderInline;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport useJsonFetch from '../hooks/useJsonFetch';\nimport LoaderInline from './LoaderInline';\n\nfunction Data({ pathname, description }) {\n  const [data, isLoading, error] = useJsonFetch(`${process.env.REACT_APP_URL}${pathname}`);\n\n  return (\n    <div className=\"Data\">\n      {description}\n      :\n      { isLoading && <LoaderInline /> }\n      { error && <p style={{ color: 'red' }}>Internal Server Error</p> }\n      { data && <p style={{ color: 'green' }}>{data.status}</p> }\n    </div>\n  );\n}\n\nData.defaultProps = {\n  description: '',\n};\n\nData.propTypes = {\n  pathname: PropTypes.string.isRequired,\n  description: PropTypes.string,\n};\n\nexport default Data;\n","import { useState, useEffect } from 'react';\n\nexport default function useJsonFetch(url, opts = null) {\n  const [data, setData] = useState(null);\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState(null);\n\n  useEffect(() => {\n    const fetchData = async () => {\n      setIsLoading(true);\n      try {\n        const response = await fetch(url, opts);\n        if (!response.ok) {\n          throw new Error(response.statusText);\n        }\n\n        const json = await response.json();\n        setData(json);\n        setError(null);\n      } catch (e) {\n        setError(e);\n      } finally {\n        setIsLoading(false);\n      }\n    };\n\n    fetchData();\n  }, [url, opts]);\n\n  return [data, isLoading, error];\n}\n","import React from 'react';\nimport './App.css';\nimport Data from './components/Data';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Data pathname=\"loading\" description=\"Индикатор загрузки\" />\n      <Data pathname=\"error\" description=\"Получение ошибки\" />\n      <Data pathname=\"data\" description=\"Успешное получение данных\" />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = (onPerfEntry) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({\n      getCLS, getFID, getFCP, getLCP, getTTFB,\n    }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import 'semantic-ui-css/semantic.min.css';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}